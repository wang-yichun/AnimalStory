// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.StateMachine;


public class InGameStateMachine : Invert.StateMachine.StateMachine {
    
    private Invert.StateMachine.StateMachineTrigger _GameStart;
    
    private Invert.StateMachine.StateMachineTrigger _GameStop;
    
    private Invert.StateMachine.StateMachineTrigger _PrepareNewGame;
    
    private Ready _Ready;
    
    private Ongoing _Ongoing;
    
    private Stop _Stop;
    
    public InGameStateMachine(uFrame.MVVM.ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public InGameStateMachine() : 
            base(null, string.Empty) {
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.Ready;
        }
    }
    
    public virtual Invert.StateMachine.StateMachineTrigger GameStart {
        get {
            if (this._GameStart == null) {
                this._GameStart = new StateMachineTrigger(this , "GameStart");
            }
            return _GameStart;
        }
        set {
            _GameStart = value;
        }
    }
    
    public virtual Invert.StateMachine.StateMachineTrigger GameStop {
        get {
            if (this._GameStop == null) {
                this._GameStop = new StateMachineTrigger(this , "GameStop");
            }
            return _GameStop;
        }
        set {
            _GameStop = value;
        }
    }
    
    public virtual Invert.StateMachine.StateMachineTrigger PrepareNewGame {
        get {
            if (this._PrepareNewGame == null) {
                this._PrepareNewGame = new StateMachineTrigger(this , "PrepareNewGame");
            }
            return _PrepareNewGame;
        }
        set {
            _PrepareNewGame = value;
        }
    }
    
    public virtual Ready Ready {
        get {
            if (this._Ready == null) {
                this._Ready = new Ready();
            }
            return _Ready;
        }
        set {
            _Ready = value;
        }
    }
    
    public virtual Ongoing Ongoing {
        get {
            if (this._Ongoing == null) {
                this._Ongoing = new Ongoing();
            }
            return _Ongoing;
        }
        set {
            _Ongoing = value;
        }
    }
    
    public virtual Stop Stop {
        get {
            if (this._Stop == null) {
                this._Stop = new Stop();
            }
            return _Stop;
        }
        set {
            _Stop = value;
        }
    }
    
    public override void Compose(System.Collections.Generic.List<Invert.StateMachine.State> states) {
        base.Compose(states);
        Ready.GameStart = new StateTransition("GameStart", Ready, Ongoing);
        Transitions.Add(Ready.GameStart);
        Ready.AddTrigger(GameStart, Ready.GameStart);
        Ready.StateMachine = this;
        states.Add(Ready);
        Ongoing.GameStop = new StateTransition("GameStop", Ongoing, Stop);
        Transitions.Add(Ongoing.GameStop);
        Ongoing.AddTrigger(GameStop, Ongoing.GameStop);
        Ongoing.StateMachine = this;
        states.Add(Ongoing);
        Stop.PrepareNewGame = new StateTransition("PrepareNewGame", Stop, Ready);
        Transitions.Add(Stop.PrepareNewGame);
        Stop.AddTrigger(PrepareNewGame, Stop.PrepareNewGame);
        Stop.StateMachine = this;
        states.Add(Stop);
    }
}

public class Ready : Invert.StateMachine.State {
    
    private Invert.StateMachine.StateTransition _GameStart;
    
    public Invert.StateMachine.StateTransition GameStart {
        get {
            return _GameStart;
        }
        set {
            _GameStart = value;
        }
    }
    
    public override string Name {
        get {
            return "Ready";
        }
    }
    
    public virtual void GameStartTransition() {
        this.Transition(this.GameStart);
    }
}

public class Ongoing : Invert.StateMachine.State {
    
    private Invert.StateMachine.StateTransition _GameStop;
    
    public Invert.StateMachine.StateTransition GameStop {
        get {
            return _GameStop;
        }
        set {
            _GameStop = value;
        }
    }
    
    public override string Name {
        get {
            return "Ongoing";
        }
    }
    
    public virtual void GameStopTransition() {
        this.Transition(this.GameStop);
    }
}

public class Stop : Invert.StateMachine.State {
    
    private Invert.StateMachine.StateTransition _PrepareNewGame;
    
    public Invert.StateMachine.StateTransition PrepareNewGame {
        get {
            return _PrepareNewGame;
        }
        set {
            _PrepareNewGame = value;
        }
    }
    
    public override string Name {
        get {
            return "Stop";
        }
    }
    
    public virtual void PrepareNewGameTransition() {
        this.Transition(this.PrepareNewGame);
    }
}

public class AnimalState : Invert.StateMachine.StateMachine {
    
    private Invert.StateMachine.StateMachineTrigger _Destroy;
    
    private Invert.StateMachine.StateMachineTrigger _Drop;
    
    private Invert.StateMachine.StateMachineTrigger _DropStop;
    
    private Idle _Idle;
    
    private Destroying _Destroying;
    
    private Dropping _Dropping;
    
    public AnimalState(uFrame.MVVM.ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public AnimalState() : 
            base(null, string.Empty) {
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.Idle;
        }
    }
    
    public virtual Invert.StateMachine.StateMachineTrigger Destroy {
        get {
            if (this._Destroy == null) {
                this._Destroy = new StateMachineTrigger(this , "Destroy");
            }
            return _Destroy;
        }
        set {
            _Destroy = value;
        }
    }
    
    public virtual Invert.StateMachine.StateMachineTrigger Drop {
        get {
            if (this._Drop == null) {
                this._Drop = new StateMachineTrigger(this , "Drop");
            }
            return _Drop;
        }
        set {
            _Drop = value;
        }
    }
    
    public virtual Invert.StateMachine.StateMachineTrigger DropStop {
        get {
            if (this._DropStop == null) {
                this._DropStop = new StateMachineTrigger(this , "DropStop");
            }
            return _DropStop;
        }
        set {
            _DropStop = value;
        }
    }
    
    public virtual Idle Idle {
        get {
            if (this._Idle == null) {
                this._Idle = new Idle();
            }
            return _Idle;
        }
        set {
            _Idle = value;
        }
    }
    
    public virtual Destroying Destroying {
        get {
            if (this._Destroying == null) {
                this._Destroying = new Destroying();
            }
            return _Destroying;
        }
        set {
            _Destroying = value;
        }
    }
    
    public virtual Dropping Dropping {
        get {
            if (this._Dropping == null) {
                this._Dropping = new Dropping();
            }
            return _Dropping;
        }
        set {
            _Dropping = value;
        }
    }
    
    public override void Compose(System.Collections.Generic.List<Invert.StateMachine.State> states) {
        base.Compose(states);
        Idle.Destroy = new StateTransition("Destroy", Idle, Destroying);
        Transitions.Add(Idle.Destroy);
        Idle.Drop = new StateTransition("Drop", Idle, Dropping);
        Transitions.Add(Idle.Drop);
        Idle.AddTrigger(Destroy, Idle.Destroy);
        Idle.AddTrigger(Drop, Idle.Drop);
        Idle.StateMachine = this;
        states.Add(Idle);
        Destroying.StateMachine = this;
        states.Add(Destroying);
        Dropping.DropStop = new StateTransition("DropStop", Dropping, Idle);
        Transitions.Add(Dropping.DropStop);
        Dropping.AddTrigger(DropStop, Dropping.DropStop);
        Dropping.StateMachine = this;
        states.Add(Dropping);
    }
}

public class Idle : Invert.StateMachine.State {
    
    private Invert.StateMachine.StateTransition _Destroy;
    
    private Invert.StateMachine.StateTransition _Drop;
    
    public Invert.StateMachine.StateTransition Destroy {
        get {
            return _Destroy;
        }
        set {
            _Destroy = value;
        }
    }
    
    public Invert.StateMachine.StateTransition Drop {
        get {
            return _Drop;
        }
        set {
            _Drop = value;
        }
    }
    
    public override string Name {
        get {
            return "Idle";
        }
    }
    
    public virtual void DestroyTransition() {
        this.Transition(this.Destroy);
    }
    
    public virtual void DropTransition() {
        this.Transition(this.Drop);
    }
}

public class Destroying : Invert.StateMachine.State {
    
    public override string Name {
        get {
            return "Destroying";
        }
    }
}

public class Dropping : Invert.StateMachine.State {
    
    private Invert.StateMachine.StateTransition _DropStop;
    
    public Invert.StateMachine.StateTransition DropStop {
        get {
            return _DropStop;
        }
        set {
            _DropStop = value;
        }
    }
    
    public override string Name {
        get {
            return "Dropping";
        }
    }
    
    public virtual void DropStopTransition() {
        this.Transition(this.DropStop);
    }
}
