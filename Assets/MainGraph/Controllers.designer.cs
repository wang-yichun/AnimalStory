// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using uFrame.Serialization;
using uFrame.MVVM;
using uFrame.Kernel;
using uFrame.IOC;


public class CharacterControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _CharacterViewModelManager;
    
    [uFrame.IOC.InjectAttribute("Character")]
    public uFrame.MVVM.IViewModelManager CharacterViewModelManager {
        get {
            return _CharacterViewModelManager;
        }
        set {
            _CharacterViewModelManager = value;
        }
    }
    
    public IEnumerable<CharacterViewModel> CharacterViewModels {
        get {
            return CharacterViewModelManager.OfType<CharacterViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeCharacter(((CharacterViewModel)(viewModel)));
    }
    
    public virtual CharacterViewModel CreateCharacter() {
        return ((CharacterViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new CharacterViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeCharacter(CharacterViewModel viewModel) {
        // This is called when a CharacterViewModel is created
        CharacterViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        CharacterViewModelManager.Remove(viewModel);
    }
}

public class InGameRootControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _InGameRootViewModelManager;
    
    [uFrame.IOC.InjectAttribute("InGameRoot")]
    public uFrame.MVVM.IViewModelManager InGameRootViewModelManager {
        get {
            return _InGameRootViewModelManager;
        }
        set {
            _InGameRootViewModelManager = value;
        }
    }
    
    public IEnumerable<InGameRootViewModel> InGameRootViewModels {
        get {
            return InGameRootViewModelManager.OfType<InGameRootViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeInGameRoot(((InGameRootViewModel)(viewModel)));
    }
    
    public virtual InGameRootViewModel CreateInGameRoot() {
        return ((InGameRootViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new InGameRootViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeInGameRoot(InGameRootViewModel viewModel) {
        // This is called when a InGameRootViewModel is created
        InGameRootViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        InGameRootViewModelManager.Remove(viewModel);
    }
}
