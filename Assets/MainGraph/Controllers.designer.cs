// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using uFrame.Serialization;
using uFrame.MVVM;
using uFrame.Kernel;
using uFrame.IOC;


public class AnimalControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _AnimalViewModelManager;
    
    private InGameRootViewModel _InGameRoot;
    
    [uFrame.IOC.InjectAttribute("Animal")]
    public uFrame.MVVM.IViewModelManager AnimalViewModelManager {
        get {
            return _AnimalViewModelManager;
        }
        set {
            _AnimalViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("InGameRoot")]
    public InGameRootViewModel InGameRoot {
        get {
            return _InGameRoot;
        }
        set {
            _InGameRoot = value;
        }
    }
    
    public IEnumerable<AnimalViewModel> AnimalViewModels {
        get {
            return AnimalViewModelManager.OfType<AnimalViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeAnimal(((AnimalViewModel)(viewModel)));
    }
    
    public virtual AnimalViewModel CreateAnimal() {
        return ((AnimalViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new AnimalViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeAnimal(AnimalViewModel viewModel) {
        // This is called when a AnimalViewModel is created
        viewModel.Tapped.Action = this.TappedHandler;
        viewModel.DestroySelf.Action = this.DestroySelfHandler;
        AnimalViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        AnimalViewModelManager.Remove(viewModel);
    }
    
    public virtual void Tapped(AnimalViewModel viewModel) {
    }
    
    public virtual void DestroySelf(AnimalViewModel viewModel) {
    }
    
    public virtual void TappedHandler(TappedCommand command) {
        this.Tapped(command.Sender as AnimalViewModel);
    }
    
    public virtual void DestroySelfHandler(DestroySelfCommand command) {
        this.DestroySelf(command.Sender as AnimalViewModel);
    }
}

public class InGameRootControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _InGameRootViewModelManager;
    
    private InGameRootViewModel _InGameRoot;
    
    [uFrame.IOC.InjectAttribute("InGameRoot")]
    public uFrame.MVVM.IViewModelManager InGameRootViewModelManager {
        get {
            return _InGameRootViewModelManager;
        }
        set {
            _InGameRootViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("InGameRoot")]
    public InGameRootViewModel InGameRoot {
        get {
            return _InGameRoot;
        }
        set {
            _InGameRoot = value;
        }
    }
    
    public IEnumerable<InGameRootViewModel> InGameRootViewModels {
        get {
            return InGameRootViewModelManager.OfType<InGameRootViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeInGameRoot(((InGameRootViewModel)(viewModel)));
    }
    
    public virtual InGameRootViewModel CreateInGameRoot() {
        return ((InGameRootViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new InGameRootViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeInGameRoot(InGameRootViewModel viewModel) {
        // This is called when a InGameRootViewModel is created
        viewModel.CreateAnimal.Action = this.CreateAnimalHandler;
        viewModel.RemoveAnimal.Action = this.RemoveAnimalHandler;
        viewModel.InitAllAnimal.Action = this.InitAllAnimalHandler;
        viewModel.TestCommand.Action = this.TestCommandHandler;
        viewModel.RefreshSameCount.Action = this.RefreshSameCountHandler;
        InGameRootViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        InGameRootViewModelManager.Remove(viewModel);
    }
    
    public virtual void InitAllAnimal(InGameRootViewModel viewModel) {
    }
    
    public virtual void TestCommand(InGameRootViewModel viewModel) {
    }
    
    public virtual void CreateAnimalHandler(CreateAnimalCommand command) {
        this.CreateAnimal(command.Sender as InGameRootViewModel, command.Argument);
    }
    
    public virtual void RemoveAnimalHandler(RemoveAnimalCommand command) {
        this.RemoveAnimal(command.Sender as InGameRootViewModel, command.Argument);
    }
    
    public virtual void InitAllAnimalHandler(InitAllAnimalCommand command) {
        this.InitAllAnimal(command.Sender as InGameRootViewModel);
    }
    
    public virtual void TestCommandHandler(TestCommandCommand command) {
        this.TestCommand(command.Sender as InGameRootViewModel);
    }
    
    public virtual void RefreshSameCountHandler(RefreshSameCountCommand command) {
        this.RefreshSameCount(command.Sender as InGameRootViewModel, command.Argument);
    }
    
    public virtual void CreateAnimal(InGameRootViewModel viewModel, AnimalProp arg) {
    }
    
    public virtual void RemoveAnimal(InGameRootViewModel viewModel, AnimalProp arg) {
    }
    
    public virtual void RefreshSameCount(InGameRootViewModel viewModel, AnimalViewModel arg) {
    }
}

public class BlueBirdAnimalControllerBase : AnimalController {
    
    private uFrame.MVVM.IViewModelManager _BlueBirdAnimalViewModelManager;
    
    [uFrame.IOC.InjectAttribute("BlueBirdAnimal")]
    public uFrame.MVVM.IViewModelManager BlueBirdAnimalViewModelManager {
        get {
            return _BlueBirdAnimalViewModelManager;
        }
        set {
            _BlueBirdAnimalViewModelManager = value;
        }
    }
    
    public IEnumerable<BlueBirdAnimalViewModel> BlueBirdAnimalViewModels {
        get {
            return BlueBirdAnimalViewModelManager.OfType<BlueBirdAnimalViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeBlueBirdAnimal(((BlueBirdAnimalViewModel)(viewModel)));
    }
    
    public virtual BlueBirdAnimalViewModel CreateBlueBirdAnimal() {
        return ((BlueBirdAnimalViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new BlueBirdAnimalViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeBlueBirdAnimal(BlueBirdAnimalViewModel viewModel) {
        // This is called when a BlueBirdAnimalViewModel is created
        BlueBirdAnimalViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        BlueBirdAnimalViewModelManager.Remove(viewModel);
    }
}

public class CoffeeCowAnimalControllerBase : AnimalController {
    
    private uFrame.MVVM.IViewModelManager _CoffeeCowAnimalViewModelManager;
    
    [uFrame.IOC.InjectAttribute("CoffeeCowAnimal")]
    public uFrame.MVVM.IViewModelManager CoffeeCowAnimalViewModelManager {
        get {
            return _CoffeeCowAnimalViewModelManager;
        }
        set {
            _CoffeeCowAnimalViewModelManager = value;
        }
    }
    
    public IEnumerable<CoffeeCowAnimalViewModel> CoffeeCowAnimalViewModels {
        get {
            return CoffeeCowAnimalViewModelManager.OfType<CoffeeCowAnimalViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeCoffeeCowAnimal(((CoffeeCowAnimalViewModel)(viewModel)));
    }
    
    public virtual CoffeeCowAnimalViewModel CreateCoffeeCowAnimal() {
        return ((CoffeeCowAnimalViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new CoffeeCowAnimalViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeCoffeeCowAnimal(CoffeeCowAnimalViewModel viewModel) {
        // This is called when a CoffeeCowAnimalViewModel is created
        CoffeeCowAnimalViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        CoffeeCowAnimalViewModelManager.Remove(viewModel);
    }
}

public class GreenFrogAnimalControllerBase : AnimalController {
    
    private uFrame.MVVM.IViewModelManager _GreenFrogAnimalViewModelManager;
    
    [uFrame.IOC.InjectAttribute("GreenFrogAnimal")]
    public uFrame.MVVM.IViewModelManager GreenFrogAnimalViewModelManager {
        get {
            return _GreenFrogAnimalViewModelManager;
        }
        set {
            _GreenFrogAnimalViewModelManager = value;
        }
    }
    
    public IEnumerable<GreenFrogAnimalViewModel> GreenFrogAnimalViewModels {
        get {
            return GreenFrogAnimalViewModelManager.OfType<GreenFrogAnimalViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeGreenFrogAnimal(((GreenFrogAnimalViewModel)(viewModel)));
    }
    
    public virtual GreenFrogAnimalViewModel CreateGreenFrogAnimal() {
        return ((GreenFrogAnimalViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new GreenFrogAnimalViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeGreenFrogAnimal(GreenFrogAnimalViewModel viewModel) {
        // This is called when a GreenFrogAnimalViewModel is created
        GreenFrogAnimalViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        GreenFrogAnimalViewModelManager.Remove(viewModel);
    }
}
