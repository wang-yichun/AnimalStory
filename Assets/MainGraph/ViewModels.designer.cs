// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.IOC;
using uFrame.Kernel;
using uFrame.MVVM;
using uFrame.MVVM.Bindings;
using uFrame.Serialization;
using UnityEngine;
using UniRx;


public partial class AnimalViewModelBase : uFrame.MVVM.ViewModel {
    
    private System.IDisposable _ShouldDestroyDisposable;
    
    private System.IDisposable _ShouldDropDisposable;
    
    private System.IDisposable _ShouldNotDropDisposable;
    
    private AnimalState _AnimalStateProperty;
    
    private P<Boolean> _ShouldDestroyProperty;
    
    private P<Boolean> _ShouldDropProperty;
    
    private P<Boolean> _ShouldNotDropProperty;
    
    private P<AnimalType> _AnimalTypeProperty;
    
    private P<Int32> _SameCountProperty;
    
    private P<Loc> _LocProperty;
    
    private P<Boolean> _needDestroyProperty;
    
    private P<Boolean> _needDropProperty;
    
    private P<AnimalProp> _TargetPropProperty;
    
    private Signal<TappedCommand> _Tapped;
    
    private Signal<DestroySelfCommand> _DestroySelf;
    
    private Signal<GotDropTargetCommand> _GotDropTarget;
    
    public AnimalViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public virtual AnimalState AnimalStateProperty {
        get {
            return _AnimalStateProperty;
        }
        set {
            _AnimalStateProperty = value;
        }
    }
    
    public virtual Invert.StateMachine.State AnimalState {
        get {
            return AnimalStateProperty.Value;
        }
        set {
            AnimalStateProperty.Value = value;
        }
    }
    
    public virtual P<Boolean> ShouldDestroyProperty {
        get {
            return _ShouldDestroyProperty;
        }
        set {
            _ShouldDestroyProperty = value;
        }
    }
    
    public virtual P<Boolean> ShouldDropProperty {
        get {
            return _ShouldDropProperty;
        }
        set {
            _ShouldDropProperty = value;
        }
    }
    
    public virtual P<Boolean> ShouldNotDropProperty {
        get {
            return _ShouldNotDropProperty;
        }
        set {
            _ShouldNotDropProperty = value;
        }
    }
    
    public virtual P<AnimalType> AnimalTypeProperty {
        get {
            return _AnimalTypeProperty;
        }
        set {
            _AnimalTypeProperty = value;
        }
    }
    
    public virtual P<Int32> SameCountProperty {
        get {
            return _SameCountProperty;
        }
        set {
            _SameCountProperty = value;
        }
    }
    
    public virtual P<Loc> LocProperty {
        get {
            return _LocProperty;
        }
        set {
            _LocProperty = value;
        }
    }
    
    public virtual P<Boolean> needDestroyProperty {
        get {
            return _needDestroyProperty;
        }
        set {
            _needDestroyProperty = value;
        }
    }
    
    public virtual P<Boolean> needDropProperty {
        get {
            return _needDropProperty;
        }
        set {
            _needDropProperty = value;
        }
    }
    
    public virtual P<AnimalProp> TargetPropProperty {
        get {
            return _TargetPropProperty;
        }
        set {
            _TargetPropProperty = value;
        }
    }
    
    public virtual Boolean ShouldDestroy {
        get {
            return ShouldDestroyProperty.Value;
        }
        set {
            ShouldDestroyProperty.Value = value;
        }
    }
    
    public virtual Boolean ShouldDrop {
        get {
            return ShouldDropProperty.Value;
        }
        set {
            ShouldDropProperty.Value = value;
        }
    }
    
    public virtual Boolean ShouldNotDrop {
        get {
            return ShouldNotDropProperty.Value;
        }
        set {
            ShouldNotDropProperty.Value = value;
        }
    }
    
    public virtual AnimalType AnimalType {
        get {
            return AnimalTypeProperty.Value;
        }
        set {
            AnimalTypeProperty.Value = value;
        }
    }
    
    public virtual Int32 SameCount {
        get {
            return SameCountProperty.Value;
        }
        set {
            SameCountProperty.Value = value;
        }
    }
    
    public virtual Loc Loc {
        get {
            return LocProperty.Value;
        }
        set {
            LocProperty.Value = value;
        }
    }
    
    public virtual Boolean needDestroy {
        get {
            return needDestroyProperty.Value;
        }
        set {
            needDestroyProperty.Value = value;
        }
    }
    
    public virtual Boolean needDrop {
        get {
            return needDropProperty.Value;
        }
        set {
            needDropProperty.Value = value;
        }
    }
    
    public virtual AnimalProp TargetProp {
        get {
            return TargetPropProperty.Value;
        }
        set {
            TargetPropProperty.Value = value;
        }
    }
    
    public virtual Signal<TappedCommand> Tapped {
        get {
            return _Tapped;
        }
        set {
            _Tapped = value;
        }
    }
    
    public virtual Signal<DestroySelfCommand> DestroySelf {
        get {
            return _DestroySelf;
        }
        set {
            _DestroySelf = value;
        }
    }
    
    public virtual Signal<GotDropTargetCommand> GotDropTarget {
        get {
            return _GotDropTarget;
        }
        set {
            _GotDropTarget = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
        this.Tapped = new Signal<TappedCommand>(this);
        this.DestroySelf = new Signal<DestroySelfCommand>(this);
        this.GotDropTarget = new Signal<GotDropTargetCommand>(this);
        _ShouldDestroyProperty = new P<Boolean>(this, "ShouldDestroy");
        _ShouldDropProperty = new P<Boolean>(this, "ShouldDrop");
        _ShouldNotDropProperty = new P<Boolean>(this, "ShouldNotDrop");
        _AnimalTypeProperty = new P<AnimalType>(this, "AnimalType");
        _SameCountProperty = new P<Int32>(this, "SameCount");
        _LocProperty = new P<Loc>(this, "Loc");
        _needDestroyProperty = new P<Boolean>(this, "needDestroy");
        _needDropProperty = new P<Boolean>(this, "needDrop");
        _TargetPropProperty = new P<AnimalProp>(this, "TargetProp");
        _AnimalStateProperty = new AnimalState(this, "AnimalState");
        ResetShouldDestroy();
        ResetShouldDrop();
        ResetShouldNotDrop();
        AnimalStateProperty.Destroy.AddComputer(ShouldDestroyProperty);
        AnimalStateProperty.Drop.AddComputer(ShouldDropProperty);
        AnimalStateProperty.DropStop.AddComputer(ShouldNotDropProperty);
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
        this.AnimalType = (AnimalType)stream.DeserializeInt("AnimalType");;
        this.SameCount = stream.DeserializeInt("SameCount");;
        this.needDestroy = stream.DeserializeBool("needDestroy");;
        this.needDrop = stream.DeserializeBool("needDrop");;
        this._AnimalStateProperty.SetState(stream.DeserializeString("AnimalState"));
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
        stream.SerializeInt("AnimalType", (int)this.AnimalType);;
        stream.SerializeInt("SameCount", this.SameCount);
        stream.SerializeBool("needDestroy", this.needDestroy);
        stream.SerializeBool("needDrop", this.needDrop);
        stream.SerializeString("AnimalState", this.AnimalState.Name);;
    }
    
    protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
        base.FillCommands(list);
        list.Add(new ViewModelCommandInfo("Tapped", Tapped) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("DestroySelf", DestroySelf) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("GotDropTarget", GotDropTarget) { ParameterType = typeof(void) });
    }
    
    protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
        base.FillProperties(list);
        // ComputedPropertyNode
        list.Add(new ViewModelPropertyInfo(_ShouldDestroyProperty, false, false, false, true));
        // ComputedPropertyNode
        list.Add(new ViewModelPropertyInfo(_ShouldDropProperty, false, false, false, true));
        // ComputedPropertyNode
        list.Add(new ViewModelPropertyInfo(_ShouldNotDropProperty, false, false, false, true));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_AnimalTypeProperty, false, false, true, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_SameCountProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_LocProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_needDestroyProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_needDropProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_AnimalStateProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_TargetPropProperty, false, false, false, false));
    }
    
    public virtual System.Collections.Generic.IEnumerable<uFrame.MVVM.IObservableProperty> GetShouldDestroyDependents() {
        yield return needDestroyProperty;
        yield break;
    }
    
    public virtual System.Collections.Generic.IEnumerable<uFrame.MVVM.IObservableProperty> GetShouldDropDependents() {
        yield return needDropProperty;
        yield break;
    }
    
    public virtual System.Collections.Generic.IEnumerable<uFrame.MVVM.IObservableProperty> GetShouldNotDropDependents() {
        yield return _ShouldDropProperty;
        yield break;
    }
    
    public virtual void ResetShouldDestroy() {
        if (_ShouldDestroyDisposable != null) {
            _ShouldDestroyDisposable.Dispose();
        }
        _ShouldDestroyDisposable = _ShouldDestroyProperty.ToComputed(ComputeShouldDestroy, this.GetShouldDestroyDependents().ToArray()).DisposeWith(this);
    }
    
    public virtual void ResetShouldDrop() {
        if (_ShouldDropDisposable != null) {
            _ShouldDropDisposable.Dispose();
        }
        _ShouldDropDisposable = _ShouldDropProperty.ToComputed(ComputeShouldDrop, this.GetShouldDropDependents().ToArray()).DisposeWith(this);
    }
    
    public virtual void ResetShouldNotDrop() {
        if (_ShouldNotDropDisposable != null) {
            _ShouldNotDropDisposable.Dispose();
        }
        _ShouldNotDropDisposable = _ShouldNotDropProperty.ToComputed(ComputeShouldNotDrop, this.GetShouldNotDropDependents().ToArray()).DisposeWith(this);
    }
    
    public virtual Boolean ComputeShouldDestroy() {
        return default(Boolean);
    }
    
    public virtual Boolean ComputeShouldDrop() {
        return default(Boolean);
    }
    
    public virtual Boolean ComputeShouldNotDrop() {
        return default(Boolean);
    }
}

public partial class AnimalViewModel {
    
    public AnimalViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class InGameRootViewModelBase : uFrame.MVVM.ViewModel {
    
    private System.IDisposable _CanTapDisposable;
    
    private System.IDisposable _ShouldCreateAndDropDisposable;
    
    private InGameStateMachine _InGameStateProperty;
    
    private P<Boolean> _CanTapProperty;
    
    private P<Boolean> _ShouldCreateAndDropProperty;
    
    private P<MapInfo> _MapInfoProperty;
    
    private P<RuleInfo> _RuleInfoProperty;
    
    private P<Int32> _IdleAnimalsCountProperty;
    
    private P<Int32> _NullAnimalsCountProperty;
    
    private ModelCollection<AnimalViewModel> _AnimalCollections;
    
    private Signal<CreateAnimalCommand> _CreateAnimal;
    
    private Signal<RemoveAnimalCommand> _RemoveAnimal;
    
    private Signal<AnimalDropToCommand> _AnimalDropTo;
    
    private Signal<CreateAndDropCommand> _CreateAndDrop;
    
    private Signal<InitAllAnimalCommand> _InitAllAnimal;
    
    private Signal<TestCommandCommand> _TestCommand;
    
    private Signal<RefreshSameCountCommand> _RefreshSameCount;
    
    private Signal<CalcAnimalsCountCommand> _CalcAnimalsCount;
    
    public InGameRootViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public virtual InGameStateMachine InGameStateProperty {
        get {
            return _InGameStateProperty;
        }
        set {
            _InGameStateProperty = value;
        }
    }
    
    public virtual Invert.StateMachine.State InGameState {
        get {
            return InGameStateProperty.Value;
        }
        set {
            InGameStateProperty.Value = value;
        }
    }
    
    public virtual P<Boolean> CanTapProperty {
        get {
            return _CanTapProperty;
        }
        set {
            _CanTapProperty = value;
        }
    }
    
    public virtual P<Boolean> ShouldCreateAndDropProperty {
        get {
            return _ShouldCreateAndDropProperty;
        }
        set {
            _ShouldCreateAndDropProperty = value;
        }
    }
    
    public virtual P<MapInfo> MapInfoProperty {
        get {
            return _MapInfoProperty;
        }
        set {
            _MapInfoProperty = value;
        }
    }
    
    public virtual P<RuleInfo> RuleInfoProperty {
        get {
            return _RuleInfoProperty;
        }
        set {
            _RuleInfoProperty = value;
        }
    }
    
    public virtual P<Int32> IdleAnimalsCountProperty {
        get {
            return _IdleAnimalsCountProperty;
        }
        set {
            _IdleAnimalsCountProperty = value;
        }
    }
    
    public virtual P<Int32> NullAnimalsCountProperty {
        get {
            return _NullAnimalsCountProperty;
        }
        set {
            _NullAnimalsCountProperty = value;
        }
    }
    
    public virtual Boolean CanTap {
        get {
            return CanTapProperty.Value;
        }
        set {
            CanTapProperty.Value = value;
        }
    }
    
    public virtual Boolean ShouldCreateAndDrop {
        get {
            return ShouldCreateAndDropProperty.Value;
        }
        set {
            ShouldCreateAndDropProperty.Value = value;
        }
    }
    
    public virtual MapInfo MapInfo {
        get {
            return MapInfoProperty.Value;
        }
        set {
            MapInfoProperty.Value = value;
        }
    }
    
    public virtual RuleInfo RuleInfo {
        get {
            return RuleInfoProperty.Value;
        }
        set {
            RuleInfoProperty.Value = value;
        }
    }
    
    public virtual Int32 IdleAnimalsCount {
        get {
            return IdleAnimalsCountProperty.Value;
        }
        set {
            IdleAnimalsCountProperty.Value = value;
        }
    }
    
    public virtual Int32 NullAnimalsCount {
        get {
            return NullAnimalsCountProperty.Value;
        }
        set {
            NullAnimalsCountProperty.Value = value;
        }
    }
    
    public virtual ModelCollection<AnimalViewModel> AnimalCollections {
        get {
            return _AnimalCollections;
        }
        set {
            _AnimalCollections = value;
        }
    }
    
    public virtual Signal<CreateAnimalCommand> CreateAnimal {
        get {
            return _CreateAnimal;
        }
        set {
            _CreateAnimal = value;
        }
    }
    
    public virtual Signal<RemoveAnimalCommand> RemoveAnimal {
        get {
            return _RemoveAnimal;
        }
        set {
            _RemoveAnimal = value;
        }
    }
    
    public virtual Signal<AnimalDropToCommand> AnimalDropTo {
        get {
            return _AnimalDropTo;
        }
        set {
            _AnimalDropTo = value;
        }
    }
    
    public virtual Signal<CreateAndDropCommand> CreateAndDrop {
        get {
            return _CreateAndDrop;
        }
        set {
            _CreateAndDrop = value;
        }
    }
    
    public virtual Signal<InitAllAnimalCommand> InitAllAnimal {
        get {
            return _InitAllAnimal;
        }
        set {
            _InitAllAnimal = value;
        }
    }
    
    public virtual Signal<TestCommandCommand> TestCommand {
        get {
            return _TestCommand;
        }
        set {
            _TestCommand = value;
        }
    }
    
    public virtual Signal<RefreshSameCountCommand> RefreshSameCount {
        get {
            return _RefreshSameCount;
        }
        set {
            _RefreshSameCount = value;
        }
    }
    
    public virtual Signal<CalcAnimalsCountCommand> CalcAnimalsCount {
        get {
            return _CalcAnimalsCount;
        }
        set {
            _CalcAnimalsCount = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
        this.CreateAnimal = new Signal<CreateAnimalCommand>(this);
        this.RemoveAnimal = new Signal<RemoveAnimalCommand>(this);
        this.AnimalDropTo = new Signal<AnimalDropToCommand>(this);
        this.CreateAndDrop = new Signal<CreateAndDropCommand>(this);
        this.InitAllAnimal = new Signal<InitAllAnimalCommand>(this);
        this.TestCommand = new Signal<TestCommandCommand>(this);
        this.RefreshSameCount = new Signal<RefreshSameCountCommand>(this);
        this.CalcAnimalsCount = new Signal<CalcAnimalsCountCommand>(this);
        _CanTapProperty = new P<Boolean>(this, "CanTap");
        _ShouldCreateAndDropProperty = new P<Boolean>(this, "ShouldCreateAndDrop");
        _MapInfoProperty = new P<MapInfo>(this, "MapInfo");
        _RuleInfoProperty = new P<RuleInfo>(this, "RuleInfo");
        _IdleAnimalsCountProperty = new P<Int32>(this, "IdleAnimalsCount");
        _NullAnimalsCountProperty = new P<Int32>(this, "NullAnimalsCount");
        _AnimalCollections = new ModelCollection<AnimalViewModel>(this, "AnimalCollections");
        _InGameStateProperty = new InGameStateMachine(this, "InGameState");
        ResetCanTap();
        ResetShouldCreateAndDrop();
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
        this._InGameStateProperty.SetState(stream.DeserializeString("InGameState"));
        this.IdleAnimalsCount = stream.DeserializeInt("IdleAnimalsCount");;
        this.NullAnimalsCount = stream.DeserializeInt("NullAnimalsCount");;
        if (stream.DeepSerialize) {
            this.AnimalCollections.Clear();
            this.AnimalCollections.AddRange(stream.DeserializeObjectArray<AnimalViewModel>("AnimalCollections"));
        }
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
        stream.SerializeString("InGameState", this.InGameState.Name);;
        stream.SerializeInt("IdleAnimalsCount", this.IdleAnimalsCount);
        stream.SerializeInt("NullAnimalsCount", this.NullAnimalsCount);
        if (stream.DeepSerialize) stream.SerializeArray("AnimalCollections", this.AnimalCollections);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
        base.FillCommands(list);
        list.Add(new ViewModelCommandInfo("CreateAnimal", CreateAnimal) { ParameterType = typeof(AnimalProp) });
        list.Add(new ViewModelCommandInfo("RemoveAnimal", RemoveAnimal) { ParameterType = typeof(AnimalProp) });
        list.Add(new ViewModelCommandInfo("AnimalDropTo", AnimalDropTo) { ParameterType = typeof(AnimalDropToCommand) });
        list.Add(new ViewModelCommandInfo("CreateAndDrop", CreateAndDrop) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("InitAllAnimal", InitAllAnimal) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("TestCommand", TestCommand) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("RefreshSameCount", RefreshSameCount) { ParameterType = typeof(AnimalViewModel) });
        list.Add(new ViewModelCommandInfo("CalcAnimalsCount", CalcAnimalsCount) { ParameterType = typeof(void) });
    }
    
    protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
        base.FillProperties(list);
        // ComputedPropertyNode
        list.Add(new ViewModelPropertyInfo(_CanTapProperty, false, false, false, true));
        // ComputedPropertyNode
        list.Add(new ViewModelPropertyInfo(_ShouldCreateAndDropProperty, false, false, false, true));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_InGameStateProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_MapInfoProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RuleInfoProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_IdleAnimalsCountProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_NullAnimalsCountProperty, false, false, false, false));
        list.Add(new ViewModelPropertyInfo(_AnimalCollections, true, true, false, false));
    }
    
    public virtual System.Collections.Generic.IEnumerable<uFrame.MVVM.IObservableProperty> GetCanTapDependents() {
        yield return IdleAnimalsCountProperty;
        yield return NullAnimalsCountProperty;
        yield break;
    }
    
    public virtual System.Collections.Generic.IEnumerable<uFrame.MVVM.IObservableProperty> GetShouldCreateAndDropDependents() {
        yield return IdleAnimalsCountProperty;
        yield return NullAnimalsCountProperty;
        yield break;
    }
    
    public virtual void ResetCanTap() {
        if (_CanTapDisposable != null) {
            _CanTapDisposable.Dispose();
        }
        _CanTapDisposable = _CanTapProperty.ToComputed(ComputeCanTap, this.GetCanTapDependents().ToArray()).DisposeWith(this);
    }
    
    public virtual void ResetShouldCreateAndDrop() {
        if (_ShouldCreateAndDropDisposable != null) {
            _ShouldCreateAndDropDisposable.Dispose();
        }
        _ShouldCreateAndDropDisposable = _ShouldCreateAndDropProperty.ToComputed(ComputeShouldCreateAndDrop, this.GetShouldCreateAndDropDependents().ToArray()).DisposeWith(this);
    }
    
    public virtual Boolean ComputeCanTap() {
        return default(Boolean);
    }
    
    public virtual Boolean ComputeShouldCreateAndDrop() {
        return default(Boolean);
    }
}

public partial class InGameRootViewModel {
    
    public InGameRootViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class BlueBirdAnimalViewModelBase : AnimalViewModel {
    
    public BlueBirdAnimalViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
        base.FillCommands(list);
    }
    
    protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
        base.FillProperties(list);
    }
}

public partial class BlueBirdAnimalViewModel {
    
    public BlueBirdAnimalViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class CoffeeCowAnimalViewModelBase : AnimalViewModel {
    
    public CoffeeCowAnimalViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
        base.FillCommands(list);
    }
    
    protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
        base.FillProperties(list);
    }
}

public partial class CoffeeCowAnimalViewModel {
    
    public CoffeeCowAnimalViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class GreenFrogAnimalViewModelBase : AnimalViewModel {
    
    public GreenFrogAnimalViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
        base.FillCommands(list);
    }
    
    protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
        base.FillProperties(list);
    }
}

public partial class GreenFrogAnimalViewModel {
    
    public GreenFrogAnimalViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
            base(aggregator) {
    }
}
