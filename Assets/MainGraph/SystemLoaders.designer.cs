// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.IOC;
using uFrame.Kernel;
using uFrame.MVVM;


public class InGameSysLoaderBase : uFrame.Kernel.SystemLoader {
    
    private InGameRootViewModel _InGameRoot;
    
    private AnimalController _AnimalController;
    
    private InGameRootController _InGameRootController;
    
    private BlueBirdAnimalController _BlueBirdAnimalController;
    
    private CoffeeCowAnimalController _CoffeeCowAnimalController;
    
    private GreenFrogAnimalController _GreenFrogAnimalController;
    
    [uFrame.IOC.InjectAttribute("InGameRoot")]
    public virtual InGameRootViewModel InGameRoot {
        get {
            if (this._InGameRoot == null) {
                this._InGameRoot = this.CreateViewModel<InGameRootViewModel>( "InGameRoot");
            }
            return _InGameRoot;
        }
        set {
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual AnimalController AnimalController {
        get {
            if (_AnimalController==null) {
                _AnimalController = Container.CreateInstance(typeof(AnimalController)) as AnimalController;;
            }
            return _AnimalController;
        }
        set {
            _AnimalController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual InGameRootController InGameRootController {
        get {
            if (_InGameRootController==null) {
                _InGameRootController = Container.CreateInstance(typeof(InGameRootController)) as InGameRootController;;
            }
            return _InGameRootController;
        }
        set {
            _InGameRootController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual BlueBirdAnimalController BlueBirdAnimalController {
        get {
            if (_BlueBirdAnimalController==null) {
                _BlueBirdAnimalController = Container.CreateInstance(typeof(BlueBirdAnimalController)) as BlueBirdAnimalController;;
            }
            return _BlueBirdAnimalController;
        }
        set {
            _BlueBirdAnimalController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual CoffeeCowAnimalController CoffeeCowAnimalController {
        get {
            if (_CoffeeCowAnimalController==null) {
                _CoffeeCowAnimalController = Container.CreateInstance(typeof(CoffeeCowAnimalController)) as CoffeeCowAnimalController;;
            }
            return _CoffeeCowAnimalController;
        }
        set {
            _CoffeeCowAnimalController = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute()]
    public virtual GreenFrogAnimalController GreenFrogAnimalController {
        get {
            if (_GreenFrogAnimalController==null) {
                _GreenFrogAnimalController = Container.CreateInstance(typeof(GreenFrogAnimalController)) as GreenFrogAnimalController;;
            }
            return _GreenFrogAnimalController;
        }
        set {
            _GreenFrogAnimalController = value;
        }
    }
    
    public override void Load() {
        Container.RegisterViewModelManager<AnimalViewModel>(new ViewModelManager<AnimalViewModel>());
        Container.RegisterController<AnimalController>(AnimalController);
        Container.RegisterViewModelManager<InGameRootViewModel>(new ViewModelManager<InGameRootViewModel>());
        Container.RegisterController<InGameRootController>(InGameRootController);
        Container.RegisterViewModelManager<BlueBirdAnimalViewModel>(new ViewModelManager<BlueBirdAnimalViewModel>());
        Container.RegisterController<BlueBirdAnimalController>(BlueBirdAnimalController);
        Container.RegisterViewModelManager<CoffeeCowAnimalViewModel>(new ViewModelManager<CoffeeCowAnimalViewModel>());
        Container.RegisterController<CoffeeCowAnimalController>(CoffeeCowAnimalController);
        Container.RegisterViewModelManager<GreenFrogAnimalViewModel>(new ViewModelManager<GreenFrogAnimalViewModel>());
        Container.RegisterController<GreenFrogAnimalController>(GreenFrogAnimalController);
        Container.RegisterViewModel<InGameRootViewModel>(InGameRoot, "InGameRoot");
    }
}
